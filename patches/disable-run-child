Index: src/launcher.c
===================================================================
--- src.orig/launcher.c
+++ src/launcher.c
@@ -780,46 +780,46 @@ run_child(wchar_t * cmdline)
 #endif
 
     debug(L"run_child: about to run '%ls'\n", cmdline);
-    job = CreateJobObject(NULL, NULL);
-    ok = QueryInformationJobObject(job, JobObjectExtendedLimitInformation,
-                                  &info, sizeof(info), &rc);
-    if (!ok || (rc != sizeof(info)) || !job)
-        error(RC_CREATE_PROCESS, L"Job information querying failed");
-    info.BasicLimitInformation.LimitFlags |= JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE |
-                                             JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK;
-    ok = SetInformationJobObject(job, JobObjectExtendedLimitInformation, &info,
-                                 sizeof(info));
-    if (!ok)
-        error(RC_CREATE_PROCESS, L"Job information setting failed");
-    memset(&si, 0, sizeof(si));
-    GetStartupInfoW(&si);
-    ok = safe_duplicate_handle(GetStdHandle(STD_INPUT_HANDLE), &si.hStdInput);
-    if (!ok)
-        error(RC_NO_STD_HANDLES, L"stdin duplication failed");
-    ok = safe_duplicate_handle(GetStdHandle(STD_OUTPUT_HANDLE), &si.hStdOutput);
-    if (!ok)
-        error(RC_NO_STD_HANDLES, L"stdout duplication failed");
-    ok = safe_duplicate_handle(GetStdHandle(STD_ERROR_HANDLE), &si.hStdError);
-    if (!ok)
-        error(RC_NO_STD_HANDLES, L"stderr duplication failed");
+    // job = CreateJobObject(NULL, NULL);
+    // ok = QueryInformationJobObject(job, JobObjectExtendedLimitInformation,
+    //                               &info, sizeof(info), &rc);
+    // if (!ok || (rc != sizeof(info)) || !job)
+    //     error(RC_CREATE_PROCESS, L"Job information querying failed");
+    // info.BasicLimitInformation.LimitFlags |= JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE |
+    //                                          JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK;
+    // ok = SetInformationJobObject(job, JobObjectExtendedLimitInformation, &info,
+    //                              sizeof(info));
+    // if (!ok)
+    //     error(RC_CREATE_PROCESS, L"Job information setting failed");
+    // memset(&si, 0, sizeof(si));
+    // GetStartupInfoW(&si);
+    // ok = safe_duplicate_handle(GetStdHandle(STD_INPUT_HANDLE), &si.hStdInput);
+    // if (!ok)
+    //     error(RC_NO_STD_HANDLES, L"stdin duplication failed");
+    // ok = safe_duplicate_handle(GetStdHandle(STD_OUTPUT_HANDLE), &si.hStdOutput);
+    // if (!ok)
+    //     error(RC_NO_STD_HANDLES, L"stdout duplication failed");
+    // ok = safe_duplicate_handle(GetStdHandle(STD_ERROR_HANDLE), &si.hStdError);
+    // if (!ok)
+    //     error(RC_NO_STD_HANDLES, L"stderr duplication failed");
 
-    ok = SetConsoleCtrlHandler(ctrl_c_handler, TRUE);
-    if (!ok)
-        error(RC_CREATE_PROCESS, L"control handler setting failed");
+    // ok = SetConsoleCtrlHandler(ctrl_c_handler, TRUE);
+    // if (!ok)
+    //     error(RC_CREATE_PROCESS, L"control handler setting failed");
 
-    si.dwFlags = STARTF_USESTDHANDLES;
-    ok = CreateProcessW(NULL, cmdline, NULL, NULL, TRUE,
-                        0, NULL, NULL, &si, &pi);
-    if (!ok)
-        error(RC_CREATE_PROCESS, L"Unable to create process using '%ls'", cmdline);
-    AssignProcessToJobObject(job, pi.hProcess);
-    CloseHandle(pi.hThread);
-    WaitForSingleObjectEx(pi.hProcess, INFINITE, FALSE);
-    ok = GetExitCodeProcess(pi.hProcess, &rc);
-    if (!ok)
-        error(RC_CREATE_PROCESS, L"Failed to get exit code of process");
-    debug(L"child process exit code: %d\n", rc);
-    exit(rc);
+    // si.dwFlags = STARTF_USESTDHANDLES;
+    // ok = CreateProcessW(NULL, cmdline, NULL, NULL, TRUE,
+    //                     0, NULL, NULL, &si, &pi);
+    // if (!ok)
+    //     error(RC_CREATE_PROCESS, L"Unable to create process using '%ls'", cmdline);
+    // AssignProcessToJobObject(job, pi.hProcess);
+    // CloseHandle(pi.hThread);
+    // WaitForSingleObjectEx(pi.hProcess, INFINITE, FALSE);
+    // ok = GetExitCodeProcess(pi.hProcess, &rc);
+    // if (!ok)
+    //     error(RC_CREATE_PROCESS, L"Failed to get exit code of process");
+    // debug(L"child process exit code: %d\n", rc);
+    exit(0);
 }
 
 static void
